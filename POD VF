#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <stdlib.h>

using namespace std;

struct no
{
	no* pai = nullptr; no* esquerda = nullptr; no* direita = nullptr;
	int val, altura, fb;
};

struct nodeBST
{
	nodeBST* pai = nullptr; nodeBST* esquerda = nullptr; nodeBST* direita = nullptr;
	int val;
};

no* raiz = nullptr; no* aux = nullptr;
nodeBST* BSTraiz = nullptr; nodeBST* BSTaux = nullptr;
int total;
ofstream myfile;

void insereBinBusca(no* noh, int val);
void BSTinsereBinBusca(nodeBST* noh, int val);
void removeBinBusca(no *noh, int val);
void BSTremoveBinBusca(nodeBST *noh, int val);
void inOrder(no* noh);
void preOrder(no* noh);
void postOrder(no* noh);
void rotDirEsq(no* noh);
void rotEsqDir(no* noh);
void rotDir(no* noh);
void rotEsq(no* noh);
void balancear(no* noh);
void fb(struct no* noh);
int altura(struct no* noh);
bool busca(no* noh, int val);
bool BSTbusca(nodeBST* noh, int val);
no* menorValor(no* menor);
nodeBST* BSTmenorValor(nodeBST* menor);
no* maiorValor(no* maior);
nodeBST* BSTmaiorValor(nodeBST* maior);
void inOrder(nodeBST* noh);
void preOrder(nodeBST* noh);
void postOrder(nodeBST* noh);

void insereBinBusca(no* noh, int val)
{
	if (raiz == NULL)
	{
		raiz = new struct no;
		raiz->val = val;
		raiz->fb = 0;
	}
	else
	{
		if (noh->val >= val)
		{
			if (noh->esquerda == NULL)
			{
				noh->esquerda = new struct no;
				noh->esquerda->val = val;
				noh->esquerda->pai = noh;
				fb(noh->esquerda);
			}
			else
				insereBinBusca(noh->esquerda, val);
		}
		else
		{
			if (noh->direita == NULL)
			{
				noh->direita = new struct no;
				noh->direita->val = val;
				noh->direita->pai = noh;
				fb(noh->direita);
			}
			else
			{
				insereBinBusca(noh->direita, val);
			}
		}
	}
}

void removeBinBusca(no *noh, int val)
{
	if (raiz == NULL) cout << "AVL vazia" << endl;
	else {
		if (busca(noh, val) == false)
			cout << "Valor nao existe." << endl;
		else {
			if (noh->val == val)
			{
				if (noh->esquerda == NULL && noh->direita == NULL)
				{
					if (noh == raiz) {
						delete(noh);
						raiz = nullptr;
					}
					else {
						no* pai = noh->pai;
						if (pai->esquerda == noh) pai->esquerda = NULL;
						else pai->direita = NULL;
						delete(noh);
						fb(raiz);
					}
				}
				else {
					if (noh->esquerda != NULL)
						aux = maiorValor(noh->esquerda);
					else
						aux = menorValor(noh->direita);
					noh->val = aux->val;
					removeBinBusca(aux, aux->val);
				}
			}
			else {
				if (noh->val > val)
					removeBinBusca(noh->esquerda, val);
				else
					removeBinBusca(noh->direita, val);
			}
		}
	}
}

bool busca(no* noh, int val)
{
	if (noh == NULL) return false;
	else if (noh->val == val) return true;
	if (noh->val > val)	busca(noh->esquerda, val);
	else busca(noh->direita, val);
}

no* menorValor(no* menor)
{
	if (raiz == NULL) cout << "AVL vazia" << endl;
	else
	{
		while (menor->esquerda != NULL)
			menor = menor->esquerda;
		return menor;
	}
}

no* maiorValor(no* maior)
{
	if (raiz == NULL) cout << "AVL vazia" << endl;
	else
	{
		while (maior->direita != NULL)
			maior = maior->direita;
		return maior;
	}
}

void inOrder(no* noh)
{
	if (raiz == NULL) cout << "AVL vazia" << endl;
	else {
		if (noh->esquerda != NULL) inOrder(noh->esquerda);
		if (noh != NULL) cout << noh->val << " ";
		else cout << endl;
		if (noh->direita != NULL) inOrder(noh->direita);
	}
}

void preOrder(no* noh)
{
	if (raiz != NULL)
	{
		if (noh != NULL) cout << noh->val << " ";
		else cout << endl;
		if (noh->esquerda != NULL) preOrder(noh->esquerda);
		if (noh->direita != NULL) preOrder(noh->direita);
	}
	else cout << "AVL vazia" << endl;
}

void postOrder(no* noh)
{
	if (raiz != NULL)
	{
		if (noh->esquerda != NULL) postOrder(noh->esquerda);
		if (noh->direita != NULL) postOrder(noh->direita);
		if (noh != NULL) cout << noh->val << " ";
		else cout << endl;
	}
	else cout << "AVL vazia" << endl;
}

void rotDirEsq(no* noh)
{
	rotDir(noh->direita);
	rotEsq(noh);
}

void rotEsqDir(no* noh)
{
	rotEsq(noh->esquerda);
	rotDir(noh);
}

void rotEsq(no* noh)
{
	if (noh == raiz) {
		noh->direita->pai = NULL;
		raiz = noh->direita;
	}
	noh->direita->pai = noh->pai;
	noh->pai = noh->direita;
	if (noh->direita->esquerda != NULL)
		noh->direita->esquerda->pai = noh;
	noh->direita = noh->direita->esquerda;
	noh->pai->esquerda = noh;
	if (noh->pai->pai != NULL && noh->pai->pai->direita == noh)
		noh->pai->pai->direita = noh->pai;
	else if (noh->pai->pai != NULL)
		noh->pai->pai->esquerda = noh->pai;
}

void rotDir(no* noh)
{
	if (noh == raiz) {
		noh->esquerda->pai = NULL;
		raiz = noh->esquerda;
	}
	noh->esquerda->pai = noh->pai;
	noh->pai = noh->esquerda;
	if (noh->esquerda->direita != NULL)
		noh->esquerda->direita->pai = noh;
	noh->esquerda = noh->esquerda->direita;
	noh->pai->direita = noh;
	if (noh->pai->pai != NULL && noh->pai->pai->esquerda == noh)
		noh->pai->pai->esquerda = noh->pai;
	else if (noh->pai->pai != NULL)
		noh->pai->pai->direita = noh->pai;
}

void fb(no* noh)
{
	if (noh == NULL) return;
	noh->fb = altura(noh->direita) - altura(noh->esquerda);
	if (noh->fb <= -2 || noh->fb >= 2)
		balancear(noh);
	else
		fb(noh->pai);
}

int altura(no* noh)
{
	if (noh == NULL)
		return 0;
	int he = altura(noh->esquerda);
	int hd = altura(noh->direita);
	if (he > hd) return 1 + he;
	return 1 + hd;
}

void balancear(no* noh) {
	if (noh->fb >= 2) {
		int d = noh->fb - noh->direita->fb;
		if (d < 0) d *= -1;
		if (d < 3) {
			rotEsq(noh);
			fb(noh->esquerda);
		}
		else rotDirEsq(noh);
	}
	else {
		int d = noh->fb - noh->esquerda->fb;
		if (d < 0) d *= -1;
		if (d < 3) {
			rotDir(noh);
			fb(noh->direita);
		}
		else rotEsqDir(noh);
	}
}

void fetchRoot(no* noh)
{
	if (raiz == NULL) {
		cout << "AVL vazia." << endl;
	}
	else {
		cout << raiz->val << endl;
	}
}

void BSTinsereBinBusca(nodeBST* noh, int val)
{
	if (BSTraiz == NULL)
	{
		BSTraiz = new struct nodeBST;
		BSTraiz->val = val;
	}
	else
	{
		if (noh->val >= val)
		{
			if (noh->esquerda == NULL)
			{
				noh->esquerda = new struct nodeBST;
				noh->esquerda->val = val;
				noh->esquerda->pai = noh;
			}
			else
				BSTinsereBinBusca(noh->esquerda, val);
		}
		else
		{
			if (noh->direita == NULL)
			{
				noh->direita = new struct nodeBST;
				noh->direita->val = val;
				noh->direita->pai = noh;
			}
			else
			{
				BSTinsereBinBusca(noh->direita, val);
			}
		}
	}
}

void BSTremoveBinBusca(nodeBST *noh, int val)
{
	if (BSTraiz == NULL) cout << "AVL vazia" << endl;
	else {
		if (BSTbusca(noh, val) == false)
			cout << "Valor nao existe." << endl;
		else {
			if (noh->val == val)
			{
				if (noh->esquerda == NULL && noh->direita == NULL)
				{
					if (noh == BSTraiz) {
						delete(noh);
						BSTraiz = nullptr;
					}
					else {
						nodeBST* pai = noh->pai;
						if (pai->esquerda == noh) pai->esquerda = NULL;
						else pai->direita = NULL;
						delete(noh);
					}
				}
				else {
					if (noh->esquerda != NULL)
						BSTaux = BSTmaiorValor(noh->esquerda);
					else
						BSTaux = BSTmenorValor(noh->direita);
					noh->val = BSTaux->val;
					BSTremoveBinBusca(BSTaux, BSTaux->val);
				}
			}
			else {
				if (noh->val > val)
					BSTremoveBinBusca(noh->esquerda, val);
				else
					BSTremoveBinBusca(noh->direita, val);
			}
		}
	}
}

bool BSTbusca(nodeBST* noh, int val)
{
	if (noh == NULL) return false;
	else if (noh->val == val) return true;
	if (noh->val > val)	BSTbusca(noh->esquerda, val);
	else BSTbusca(noh->direita, val);
}

nodeBST* BSTmenorValor(nodeBST* menor)
{
	if (BSTraiz == NULL) cout << "AVL vazia" << endl;
	else
	{
		while (menor->esquerda != NULL)
			menor = menor->esquerda;
		return menor;
	}
}

nodeBST* BSTmaiorValor(nodeBST* maior)
{
	if (BSTraiz == NULL) cout << "AVL vazia" << endl;
	else
	{
		while (maior->direita != NULL)
			maior = maior->direita;
		return maior;
	}
}

void inOrder(nodeBST* noh)
{
	if (BSTraiz == NULL) cout << "AVL vazia" << endl;
	else {
		if (noh->esquerda != NULL) inOrder(noh->esquerda);
		if (noh != NULL) cout << noh->val << " ";
		else cout << endl;
		if (noh->direita != NULL) inOrder(noh->direita);
	}
}

void preOrder(nodeBST* noh)
{
	if (BSTraiz != NULL)
	{
		if (noh != NULL) cout << noh->val << " ";
		else cout << endl;
		if (noh->esquerda != NULL) preOrder(noh->esquerda);
		if (noh->direita != NULL) preOrder(noh->direita);
	}
	else cout << "AVL vazia" << endl;
}

void postOrder(nodeBST* noh)
{
	if (BSTraiz != NULL)
	{
		if (noh->esquerda != NULL) postOrder(noh->esquerda);
		if (noh->direita != NULL) postOrder(noh->direita);
		if (noh != NULL) cout << noh->val << " ";
		else cout << endl;
	}
	else cout << "AVL vazia" << endl;
}

void avlSaveInOrder(no* noh) {
	if (raiz != NULL)
	{
		if (noh->esquerda != NULL) avlSaveInOrder(noh->esquerda);
		if (noh != NULL) myfile << noh->val << ",";
		if (noh->direita != NULL) avlSaveInOrder(noh->direita);
	}
	else cout << "AVL vazia" << endl;
}

void bstSaveInOrder(nodeBST* noh) {
	if (BSTraiz != NULL)
	{
		if (noh->esquerda != NULL) bstSaveInOrder(noh->esquerda);
		if (noh != NULL) myfile << noh->val << ",";
		if (noh->direita != NULL) bstSaveInOrder(noh->direita);
	}
	else cout << "AVL vazia" << endl;
}

void rnSaveInOrder(no* noh) {
	if (raiz != NULL)
	{
		if (noh->esquerda != NULL) avlSaveInOrder(noh->esquerda);
		if (noh != NULL) myfile << noh->val << ",";
		if (noh->direita != NULL) avlSaveInOrder(noh->direita);
	}
	else cout << "AVL vazia" << endl;
}

struct node
{
	int key;
	node *parent;
	char color;
	node *left;
	node *right;
};
class RBtree
{
	node *root;
	node *q;
public:
	RBtree()
	{
		q = NULL;
		root = NULL;
	}
	void insert(int value);
	void insertfix(node *);
	void leftrotate(node *);
	void rightrotate(node *);
	void del(int value);
	node* successor(node *);
	void delfix(node *);
	void disp();
	void display(node *);
	void search(int value);
};
void RBtree::insert(int value)
{
	int i = 0;
	//int z = 0;
	//cout << "\nEnter key of the node to be inserted: ";
	//cin >> z;
	node *p, *q;
	node *t = new node;
	t->key = value;
	t->left = NULL;
	t->right = NULL;
	t->color = 'r';
	p = root;
	q = NULL;
	if (root == NULL)
	{
		root = t;
		t->parent = NULL;
	}
	else
	{
		while (p != NULL)
		{
			q = p;
			if (p->key<t->key)
				p = p->right;
			else
				p = p->left;
		}
		t->parent = q;
		if (q->key<t->key)
			q->right = t;
		else
			q->left = t;
	}
	insertfix(t);
}
void RBtree::insertfix(node *t)
{
	node *u;
	if (root == t)
	{
		t->color = 'b';
		return;
	}
	while (t->parent != NULL&&t->parent->color == 'r')
	{
		node *g = t->parent->parent;
		if (g->left == t->parent)
		{
			if (g->right != NULL)
			{
				u = g->right;
				if (u->color == 'r')
				{
					t->parent->color = 'b';
					u->color = 'b';
					g->color = 'r';
					t = g;
				}
			}
			else
			{
				if (t->parent->right == t)
				{
					t = t->parent;
					leftrotate(t);
				}
				t->parent->color = 'b';
				g->color = 'r';
				rightrotate(g);
			}
		}
		else
		{
			if (g->left != NULL)
			{
				u = g->left;
				if (u->color == 'r')
				{
					t->parent->color = 'b';
					u->color = 'b';
					g->color = 'r';
					t = g;
				}
			}
			else
			{
				if (t->parent->left == t)
				{
					t = t->parent;
					rightrotate(t);
				}
				t->parent->color = 'b';
				g->color = 'r';
				leftrotate(g);
			}
		}
		root->color = 'b';
	}
}

void RBtree::del(int value)
{
	if (root == NULL)
	{
		cout << "\nEmpty Tree.";
		return;
	}

	node *p;
	p = root;
	node *y = NULL;
	node *q = NULL;
	int found = 0;
	while (p != NULL&&found == 0)
	{
		if (p->key == value)
			found = 1;
		if (found == 0)
		{
			if (p->key<value)
				p = p->right;
			else
				p = p->left;
		}
	}
	if (found == 0)
	{
		cout << "\nElement Not Found.";
		return;
	}
	else
	{
		cout << "\nDeleted Element: " << p->key;
		cout << "\nColour: ";
		if (p->color == 'b')
			cout << "Black\n";
		else
			cout << "Red\n";

		if (p->parent != NULL)
			cout << "\nParent: " << p->parent->key;
		else
			cout << "\nThere is no parent of the node.  ";
		if (p->right != NULL)
			cout << "\nRight Child: " << p->right->key;
		else
			cout << "\nThere is no right child of the node.  ";
		if (p->left != NULL)
			cout << "\nLeft Child: " << p->left->key;
		else
			cout << "\nThere is no left child of the node.  ";
		cout << "\nNode Deleted.";
		if (p->left == NULL || p->right == NULL)
			y = p;
		else
			y = successor(p);
		if (y->left != NULL)
			q = y->left;
		else
		{
			if (y->right != NULL)
				q = y->right;
			else
				q = NULL;
		}
		if (q != NULL)
			q->parent = y->parent;
		if (y->parent == NULL)
			root = q;
		else
		{
			if (y == y->parent->left)
				y->parent->left = q;
			else
				y->parent->right = q;
		}
		if (y != p)
		{
			p->color = y->color;
			p->key = y->key;
		}
		if (y->color == 'b')
			delfix(q);
	}
}

void RBtree::delfix(node *p)
{
	node *s;
	while (p != root && p->color == 'b')
	{
		if (p->parent->left == p)
		{
			s = p->parent->right;
			if (s->color == 'r')
			{
				s->color = 'b';
				p->parent->color = 'r';
				leftrotate(p->parent);
				s = p->parent->right;
			}
			if (s->right->color == 'b'&&s->left->color == 'b')
			{
				s->color = 'r';
				p = p->parent;
			}
			else
			{
				if (s->right->color == 'b')
				{
					s->left->color == 'b';
					s->color = 'r';
					rightrotate(s);
					s = p->parent->right;
				}
				s->color = p->parent->color;
				p->parent->color = 'b';
				s->right->color = 'b';
				leftrotate(p->parent);
				p = root;
			}
		}
		else
		{
			s = p->parent->left;
			if (s->color == 'r')
			{
				s->color = 'b';
				p->parent->color = 'r';
				rightrotate(p->parent);
				s = p->parent->left;
			}
			if (s->left->color == 'b'&&s->right->color == 'b')
			{
				s->color = 'r';
				p = p->parent;
			}
			else
			{
				if (s->left->color == 'b')
				{
					s->right->color = 'b';
					s->color = 'r';
					leftrotate(s);
					s = p->parent->left;
				}
				s->color = p->parent->color;
				p->parent->color = 'b';
				s->left->color = 'b';
				rightrotate(p->parent);
				p = root;
			}
		}
		p->color = 'b';
		root->color = 'b';
	}
}

void RBtree::leftrotate(node *p)
{
	if (p->right == NULL)
		return;
	else
	{
		node *y = p->right;
		if (y->left != NULL)
		{
			p->right = y->left;
			y->left->parent = p;
		}
		else
			p->right = NULL;
		if (p->parent != NULL)
			y->parent = p->parent;
		if (p->parent == NULL)
			root = y;
		else
		{
			if (p == p->parent->left)
				p->parent->left = y;
			else
				p->parent->right = y;
		}
		y->left = p;
		p->parent = y;
	}
}
void RBtree::rightrotate(node *p)
{
	if (p->left == NULL)
		return;
	else
	{
		node *y = p->left;
		if (y->right != NULL)
		{
			p->left = y->right;
			y->right->parent = p;
		}
		else
			p->left = NULL;
		if (p->parent != NULL)
			y->parent = p->parent;
		if (p->parent == NULL)
			root = y;
		else
		{
			if (p == p->parent->left)
				p->parent->left = y;
			else
				p->parent->right = y;
		}
		y->right = p;
		p->parent = y;
	}
}

node* RBtree::successor(node *p)
{
	node *y = NULL;
	if (p->left != NULL)
	{
		y = p->left;
		while (y->right != NULL)
			y = y->right;
	}
	else
	{
		y = p->right;
		while (y->left != NULL)
			y = y->left;
	}
	return y;
}

void RBtree::disp()
{
	display(root);
}
void RBtree::display(node *p)
{
	if (root == NULL)
	{
		cout << "\nEmpty Tree.";
		return;
	}
	if (p != NULL)
	{
		cout << "\n\t NODE: ";
		cout << "\n Key: " << p->key;
		cout << "\n Colour: ";
		if (p->color == 'b')
			cout << "Black";
		else
			cout << "Red";
		if (p->parent != NULL)
			cout << "\n Parent: " << p->parent->key;
		else
			cout << "\n There is no parent of the node.  ";
		if (p->right != NULL)
			cout << "\n Right Child: " << p->right->key;
		else
			cout << "\n There is no right child of the node.  ";
		if (p->left != NULL)
			cout << "\n Left Child: " << p->left->key;
		else
			cout << "\n There is no left child of the node.  ";
		cout << endl;
		if (p->left)
		{
			cout << "\n\nLeft:\n";
			display(p->left);
		}
		/*else
		cout<<"\nNo Left Child.\n";*/
		if (p->right)
		{
			cout << "\n\nRight:\n";
			display(p->right);
		}
		/*else
		cout<<"\nNo Right Child.\n"*/
	}
}
void RBtree::search(int value)
{
	if (root == NULL)
	{
		cout << "\nEmpty Tree\n";
		return;
	}

	node *p = root;
	int found = 0;
	while (p != NULL && found == 0)
	{
		if (p->key == value)
			found = 1;
		if (found == 0)
		{
			if (p->key<value)
				p = p->right;
			else
				p = p->left;
		}
	}
	if (found == 0)
		cout << "\nElement Not Found.";
	else
	{
		cout << "\n\t FOUND NODE: ";
		cout << "\n Key: " << p->key;
		cout << "\n Colour: ";
		if (p->color == 'b')
			cout << "Black";
		else
			cout << "Red";
		if (p->parent != NULL)
			cout << "\n Parent: " << p->parent->key;
		else
			cout << "\n There is no parent of the node.  ";
		if (p->right != NULL)
			cout << "\n Right Child: " << p->right->key;
		else
			cout << "\n There is no right child of the node.  ";
		if (p->left != NULL)
			cout << "\n Left Child: " << p->left->key;
		else
			cout << "\n There is no left child of the node.  ";
		cout << endl;
	}
}

bool running = true;

int main()
{
	int option; int key; no* maior; no* menor; nodeBST* BSTmaior; nodeBST* BSTmenor;

	RBtree obj;

	ifstream file("arvore.csv"); // declare file stream: http://www.cplusplus.com/reference/iostream/ifstream/
	string value;

	int node;
	if (file.good())
	{
		getline(file, value, ','); // read a string until next comma: http://www.cplusplus.com/reference/string/getline/
		if (value == "avl") {
			getline(file, value, ',');
			total = stoi(value); // converte string para int
		
			while (file.good()) {
				getline(file, value, ',');
				node = stoi(value);
				insereBinBusca(raiz, node);
			}
			option = 1;
			cout << "Tree: AVL" << endl;
			cout << "Size: " << total << endl;				
		} else 	if (value == "bst") {
			getline(file, value, ',');
			total = stoi(value); // converte string para int
		
			while (file.good()) {
				getline(file, value, ',');
				node = stoi(value);
				BSTinsereBinBusca(BSTraiz, node);
			}
			option = 2;
			cout << "Tree: BST" << endl;
			cout << "Size: " << total << endl;
		}
		else if (value == "rubronegra") {
			getline(file, value, ',');
			total = stoi(value); // converte string para int			

			while (file.good()) {
				getline(file, value, ',');
				node = stoi(value);
				obj.insert(node);
			}
			option = 3;
			cout << "Tree: Red-Black" << endl;
			cout << "Size: " << total << endl;
		}
		//cout << string(value, 1, value.length() - 2); // display value removing the first and the last character from it				
		}
		else {
			cout << "Erro na leitura do arquivo" << endl;
		}

		while (running)
		{
			switch (option)
			{
			case 1:
				cout << "MENU" << '\n'
					<< "1: Inserir " << "\n"
					<< "2: Excluir " << "\n"
					<< "3: Em Ordem " << "\n"
					<< "4: Pre Order " << "\n"
					<< "5: Post Order " << "\n"
					<< "6: Menor Valor " << "\n"
					<< "7: Maior valor" << "\n"
					<< "8: Exibir root" << "\n"
					<< "9: Salvar arquivo CSV" << "\n"
					<< "10: Exit" << endl;

				while (running)
				{
					do {
						cout << "Entrada: ";
						cin >> option;
						while (cin.fail())
						{
							cout << "Entrada: ";
							cin.clear();
							cin.ignore(256, '\n');
							cin >> option;
						}
					} while (option < 1 || option > 10);

					switch (option)
					{
					case 1:
						cout << "Insira uma chave: ";
						cin >> key;
						insereBinBusca(raiz, key);
						total++;
						break;
					case 2:
						cout << "Insira uma chave: ";
						cin >> key;
						removeBinBusca(raiz, key);
						total--;
						break;
					case 3:
						inOrder(raiz);
						cout << endl;
						break;
					case 4:
						preOrder(raiz);
						cout << endl;
						break;
					case 5:
						postOrder(raiz);
						cout << endl;
						break;
					case 6:
						menor = menorValor(raiz);
						cout << "Menor valor: " << menor->val << endl;
						break;
					case 7:
						maior = maiorValor(raiz);
						cout << "Maior valor: " << maior->val << endl;
						break;
					case 8:
						fetchRoot(raiz);
						break;
					case 9:
						myfile.open("Saida.csv");
						myfile << "avl\n";
						myfile << total << "\n";
						avlSaveInOrder(raiz);
						myfile.close();
						break;
					case 10:
						running = false;
						break;
					}
				}
				break;
			case 2:
				cout << "MENU" << '\n'
					<< "1: Inserir " << "\n"
					<< "2: Excluir " << "\n"
					<< "3: Em Ordem " << "\n"
					<< "4: Pre Order " << "\n"
					<< "5: Post Order " << "\n"
					<< "6: Salvar " << "\n"
					<< "7: Exit" << endl;

				while (running)
				{
					do {
						cout << "Entrada: ";
						cin >> option;
						while (cin.fail())
						{
							cout << "Entrada: ";
							cin.clear();
							cin.ignore(256, '\n');
							cin >> option;
						}
					} while (option < 1 || option > 7);

					switch (option)
					{
					case 1:
						cout << "Insira uma chave: ";
						cin >> key;
						BSTinsereBinBusca(BSTraiz, key);
						total++;
						break;
					case 2:
						cout << "Insira uma chave: ";
						cin >> key;
						BSTremoveBinBusca(BSTraiz, key);
						total--;
						break;
					case 3:
						inOrder(BSTraiz);
						cout << endl;
						break;
					case 4:
						preOrder(BSTraiz);
						cout << endl;
						break;
					case 5:
						postOrder(BSTraiz);
						cout << endl;
						break;
					case 6:
						myfile.open("Saida.csv");
						myfile << "bst\n";
						myfile << total << "\n";
						bstSaveInOrder(BSTraiz);
						myfile.close();
						break;
					case 7:
						running = false;
						break;
					}
				}
				break;
			case 3:
				cout << "\n\t RED BLACK TREE ";
				cout << "\n 1. Insert in the tree ";
				cout << "\n 2. Delete a node from the tree";
				cout << "\n 3. Search for an element in the tree";
				cout << "\n 4. Display the tree ";
				cout << "\n 5. Save ";
				cout << "\n 6. Exit " << endl;

				while (running) {
					do {
						cout << "Entrada: ";
						cin >> option;
						while (cin.fail())
						{
							cout << "Entrada: ";
							cin.clear();
							cin.ignore(256, '\n');
							cin >> option;
						}
					} while (option < 1 || option > 6);					
					switch (option)
					{
					case 1:
						cout << "Insira uma chave: ";
						cin >> key;
						obj.insert(key);
						cout << "\nNode Inserted.\n";
						total++;
						break;
					case 2:
						cout << "Insira uma chave: ";
						cin >> key;
						obj.del(key);
						total--;
						break;
					case 3:
						cout << "Insira uma chave: ";
						cin >> key;
						obj.search(key);
						break;
					case 4:
						obj.disp();
						break;
					case 5:
						myfile.open("Saida.csv");
						myfile << "rubronegra\n";
						myfile << total << "\n";
						avlSaveInOrder(raiz);
						myfile.close();
						break;
					case 6:
						running = false;
						break;
					default:
						cout << "\nEnter a Valid Choice.";
					}
				}
				break;
			}
		}

	system("pause");
	return 0;
}
