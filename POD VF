#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <stdlib.h>
#define BLACK 0
#define RED 1

using namespace std;

// RUBRO NEGRA

typedef struct nodeRB {
	int key;
	struct nodeRB *pai, *esquerda, *direita;
	int cor;
} t_no;

t_no * nil; //folha sentinela

t_no * cria_no(int x) {
	t_no * novo = (t_no*)malloc(sizeof(t_no));

	if (novo == nil) {
		printf("Erro de alocação");
		return nil;
	}

	novo->pai = nil;
	novo->esquerda = nil;
	novo->direita = nil;
	novo->key = x;
	novo->cor = BLACK;
	return novo;
}

t_no * left_rotate(t_no * raiz, t_no * x) {
	t_no * y = x->direita;
	x->direita = y->esquerda;
	if (y->esquerda != nil) {
		y->esquerda->pai = x;
	}
	y->pai = x->pai;
	if (x->pai == nil) {
		raiz = y;
	}
	else {
		if (x == x->pai->esquerda) {
			x->pai->esquerda = y;
		}
		else {
			x->pai->direita = y;
		}
	}
	y->esquerda = x;
	x->pai = y;
	return raiz;
}

t_no * right_rotate(t_no * raiz, t_no * x) {
	t_no * y = x->esquerda;
	x->esquerda = y->direita;
	if (y->direita != nil) {
		y->direita->pai = x;
	}
	y->pai = x->pai;
	if (x->pai == nil) {
		raiz = y; //raiz
	}
	else {
		if (x == x->pai->direita) {
			x->pai->direita = y;
		}
		else {
			x->pai->esquerda = y;
		}
	}
	y->direita = x;
	x->pai = y;
	return raiz;
}

t_no * insertFixUp(t_no * raiz, t_no * z) {
	while (z != raiz && z->pai->cor == RED) {
		if (z->pai == z->pai->pai->esquerda) {
			t_no * y = z->pai->pai->direita;
			if (y->cor == RED) { //CASO 1
				z->pai->cor = BLACK;
				y->cor = BLACK;
				z->pai->pai->cor = RED;
				z = z->pai->pai;
			}
			else {
				if (z == z->pai->direita) { //CASO 2
					z = z->pai;
					raiz = left_rotate(raiz, z);
				}
				//CASO 3
				z->pai->cor = BLACK;
				z->pai->pai->cor = RED;
				raiz = right_rotate(raiz, z->pai->pai);
			}
		}
		else { //MESMA COISA DO IF INVERTENDO ESQUERDA E DIREITA
			if (z->pai == z->pai->pai->direita) {
				t_no * y = z->pai->pai->esquerda;
				if (y->cor == RED) {

					z->pai->cor = BLACK;
					y->cor = BLACK;
					z->pai->pai->cor = RED;
					z = z->pai->pai;
				}
				else {
					if (z == z->pai->esquerda) {
						z = z->pai;
						raiz = right_rotate(raiz, z);
					}
					z->pai->cor = BLACK;
					z->pai->pai->cor = RED;
					raiz = left_rotate(raiz, z->pai->pai);
				}
			}
		}
	}
	raiz->cor = BLACK;
	return raiz;
}

t_no* insert(t_no *raiz, int key) {
	t_no * z = cria_no(key);
	t_no * y = nil;
	t_no * x = raiz;

	//Caso não exista nenhum elemento
	if (raiz == nil) {
		raiz = cria_no(z->key);
		raiz->cor = BLACK;
		return raiz;
	}

	//faz a busca para inserir o nó
	while (x != nil) {
		y = x;
		if (z->key < x->key) {
			x = x->esquerda;
		}
		else {
			x = x->direita;
		}
	}
	z->pai = y;
	if (y == nil) {
		raiz = z;
	}
	else if (z->key < y->key) {
		y->esquerda = z;
	}
	else {
		y->direita = z;
	}

	z->esquerda = nil;
	z->direita = nil;
	z->cor = RED;
	//chama a função insertFixUp
	//para verificar e restaurar as propriedades
	//caso tenham sido quebradas
	raiz = insertFixUp(raiz, z);
	return raiz;
}

//imprime a arvore em ordem crescente
void in_order(t_no * raiz) {
	if (raiz == nil) {		
		return;
	}
	in_order(raiz->esquerda);	
	cout << "Node: " << raiz->key;
	if (raiz->cor == 0) {
		cout << " - Color: Black" << endl;
	}	else {
		cout << " - Color: Red" << endl;
	}
	in_order(raiz->direita);	
}

//procura o sucessor de um no
t_no * sucessor(t_no * z) {
	t_no * aux = z->direita;
	while (aux->esquerda != nil) {
		aux = aux->esquerda;
	}
	return aux;
}

t_no * deleteFixUp(t_no * raiz, t_no * x) {
	t_no * w;

	while (x != raiz && x->cor == BLACK) {
		if (x == x->pai->esquerda) {
			w = x->pai->direita;
			if (w->cor == RED) { //CASO 1
				w->cor = BLACK;
				x->pai->cor = RED;
				raiz = left_rotate(raiz, x->pai);
				w = x->pai->direita;
			} 			
			//CASO 2
			if (w->esquerda->cor == BLACK && w->direita->cor == BLACK) {
				w->cor = RED;
				x = x->pai;
			}
			else {
				if (w->direita->cor == BLACK) { //CASO 3
					w->esquerda->cor = BLACK;
					w->cor = RED;
					raiz = right_rotate(raiz, w);
					w = x->pai->direita;
				}
				//CASO 4
				w->cor = x->pai->cor;
				x->pai->cor = BLACK;
				w->direita->cor = BLACK;
				raiz = left_rotate(raiz, x->pai);
				x = raiz;
			}			
		} else {
			w = x->pai->esquerda;
			if (w->cor == RED) {
				w->cor = BLACK;
				x->pai->cor = RED;
				raiz = right_rotate(raiz, x->pai);
				w = x->pai->esquerda;
			}
			if (w->direita->cor == BLACK && w->esquerda->cor == BLACK) {
				w->cor = RED;
				x = x->pai;
			}
			else {
				if (w->esquerda->cor == BLACK) {
					w->direita->cor = BLACK;
					w->cor = RED;
					raiz = left_rotate(raiz, w);
					w = x->pai->esquerda;
				}
				w->cor = x->pai->cor;
				x->pai->cor = BLACK;
				w->esquerda->cor = BLACK;
				raiz = right_rotate(raiz, x->pai);
				x = raiz;
			}
		}
	}
	x->cor = BLACK;
	return raiz;
}

//Procura um no
t_no * search(t_no * raiz, int key) {
	t_no * aux = raiz;

	while (aux != nil) {
		if (key < aux->key) {
			aux = aux->esquerda;
		}
		else if (key > aux->key) {
			aux = aux->direita;
		}
		else if (key == aux->key) {
			return aux;
		}
	}

	return NULL;
}

t_no * remover(t_no * raiz, int key) {
	t_no * z = search(raiz, key);
	if (z == NULL) {
		printf("no nao encotrado\n");
		return raiz;
	}
	t_no * y;
	t_no * x;
	if (z->esquerda == nil || z->direita == nil) {
		y = z;
	}
	else {
		y = sucessor(z);
	}

	if (y->esquerda != nil) {
		x = y->esquerda;
	}
	else {
		x = y->direita;
	}
	x->pai = y->pai;
	if (y->pai == nil) {
		raiz = x;

	}
	else {
		if (y == y->pai->esquerda) {
			y->pai->esquerda = x;
		}
		else {
			y->pai->direita = x;
		}
	}
	if (y != z) {
		z->key = y->key;
	}
	if (y->cor == BLACK) {
		raiz = deleteFixUp(raiz, x);
	}
	return raiz;
}

// AVL + BST

struct no
{
	no* pai = nullptr; no* esquerda = nullptr; no* direita = nullptr;
	int val, altura, fb;
};

struct nodeBST
{
	nodeBST* pai = nullptr; nodeBST* esquerda = nullptr; nodeBST* direita = nullptr;
	int val;
};

no* raiz = nullptr; no* aux = nullptr;
nodeBST* BSTraiz = nullptr; nodeBST* BSTaux = nullptr;
int total;
ofstream myfile;

void insereBinBusca(no* noh, int val);
void BSTinsereBinBusca(nodeBST* noh, int val);
void removeBinBusca(no *noh, int val);
void BSTremoveBinBusca(nodeBST *noh, int val);
void inOrder(no* noh);
void preOrder(no* noh);
void postOrder(no* noh);
void rotDirEsq(no* noh);
void rotEsqDir(no* noh);
void rotDir(no* noh);
void rotEsq(no* noh);
void balancear(no* noh);
void fb(struct no* noh);
int altura(struct no* noh);
bool busca(no* noh, int val);
bool BSTbusca(nodeBST* noh, int val);
no* menorValor(no* menor);
nodeBST* BSTmenorValor(nodeBST* menor);
no* maiorValor(no* maior);
nodeBST* BSTmaiorValor(nodeBST* maior);
void inOrder(nodeBST* noh);
void preOrder(nodeBST* noh);
void postOrder(nodeBST* noh);

void insereBinBusca(no* noh, int val)
{
	if (raiz == NULL)
	{
		raiz = new struct no;
		raiz->val = val;
		raiz->fb = 0;
	}
	else
	{
		if (noh->val >= val)
		{
			if (noh->esquerda == NULL)
			{
				noh->esquerda = new struct no;
				noh->esquerda->val = val;
				noh->esquerda->pai = noh;
				fb(noh->esquerda);
			}
			else
				insereBinBusca(noh->esquerda, val);
		}
		else
		{
			if (noh->direita == NULL)
			{
				noh->direita = new struct no;
				noh->direita->val = val;
				noh->direita->pai = noh;
				fb(noh->direita);
			}
			else
			{
				insereBinBusca(noh->direita, val);
			}
		}
	}
}

void removeBinBusca(no *noh, int val)
{
	if (raiz == NULL) cout << "AVL vazia" << endl;
	else {
		if (busca(noh, val) == false)
			cout << "Valor nao existe." << endl;
		else {
			if (noh->val == val)
			{
				if (noh->esquerda == NULL && noh->direita == NULL)
				{
					if (noh == raiz) {
						delete(noh);
						raiz = nullptr;
					}
					else {
						no* pai = noh->pai;
						if (pai->esquerda == noh) pai->esquerda = NULL;
						else pai->direita = NULL;
						delete(noh);
						fb(raiz);
					}
				}
				else {
					if (noh->esquerda != NULL)
						aux = maiorValor(noh->esquerda);
					else
						aux = menorValor(noh->direita);
					noh->val = aux->val;
					removeBinBusca(aux, aux->val);
				}
			}
			else {
				if (noh->val > val)
					removeBinBusca(noh->esquerda, val);
				else
					removeBinBusca(noh->direita, val);
			}
		}
	}
}

bool busca(no* noh, int val)
{
	if (noh == NULL) return false;
	else if (noh->val == val) return true;
	if (noh->val > val)	busca(noh->esquerda, val);
	else busca(noh->direita, val);
}

no* menorValor(no* menor)
{
	if (raiz == NULL) cout << "AVL vazia" << endl;
	else
	{
		while (menor->esquerda != NULL)
			menor = menor->esquerda;
		return menor;
	}
}

no* maiorValor(no* maior)
{
	if (raiz == NULL) cout << "AVL vazia" << endl;
	else
	{
		while (maior->direita != NULL)
			maior = maior->direita;
		return maior;
	}
}

void inOrder(no* noh)
{
	if (raiz == NULL) cout << "AVL vazia" << endl;
	else {
		if (noh->esquerda != NULL) inOrder(noh->esquerda);
		if (noh != NULL) cout << noh->val << " ";
		else cout << endl;
		if (noh->direita != NULL) inOrder(noh->direita);
	}
}

void preOrder(no* noh)
{
	if (raiz != NULL)
	{
		if (noh != NULL) cout << noh->val << " ";
		else cout << endl;
		if (noh->esquerda != NULL) preOrder(noh->esquerda);
		if (noh->direita != NULL) preOrder(noh->direita);
	}
	else cout << "AVL vazia" << endl;
}

void postOrder(no* noh)
{
	if (raiz != NULL)
	{
		if (noh->esquerda != NULL) postOrder(noh->esquerda);
		if (noh->direita != NULL) postOrder(noh->direita);
		if (noh != NULL) cout << noh->val << " ";
		else cout << endl;
	}
	else cout << "AVL vazia" << endl;
}

void rotDirEsq(no* noh)
{
	rotDir(noh->direita);
	rotEsq(noh);
}

void rotEsqDir(no* noh)
{
	rotEsq(noh->esquerda);
	rotDir(noh);
}

void rotEsq(no* noh)
{
	if (noh == raiz) {
		noh->direita->pai = NULL;
		raiz = noh->direita;
	}
	noh->direita->pai = noh->pai;
	noh->pai = noh->direita;
	if (noh->direita->esquerda != NULL)
		noh->direita->esquerda->pai = noh;
	noh->direita = noh->direita->esquerda;
	noh->pai->esquerda = noh;
	if (noh->pai->pai != NULL && noh->pai->pai->direita == noh)
		noh->pai->pai->direita = noh->pai;
	else if (noh->pai->pai != NULL)
		noh->pai->pai->esquerda = noh->pai;
}

void rotDir(no* noh)
{
	if (noh == raiz) {
		noh->esquerda->pai = NULL;
		raiz = noh->esquerda;
	}
	noh->esquerda->pai = noh->pai;
	noh->pai = noh->esquerda;
	if (noh->esquerda->direita != NULL)
		noh->esquerda->direita->pai = noh;
	noh->esquerda = noh->esquerda->direita;
	noh->pai->direita = noh;
	if (noh->pai->pai != NULL && noh->pai->pai->esquerda == noh)
		noh->pai->pai->esquerda = noh->pai;
	else if (noh->pai->pai != NULL)
		noh->pai->pai->direita = noh->pai;
}

void fb(no* noh)
{
	if (noh == NULL) return;
	noh->fb = altura(noh->direita) - altura(noh->esquerda);
	if (noh->fb <= -2 || noh->fb >= 2)
		balancear(noh);
	else
		fb(noh->pai);
}

int altura(no* noh)
{
	if (noh == NULL)
		return 0;
	int he = altura(noh->esquerda);
	int hd = altura(noh->direita);
	if (he > hd) return 1 + he;
	return 1 + hd;
}

void balancear(no* noh) {
	if (noh->fb >= 2) {
		int d = noh->fb - noh->direita->fb;
		if (d < 0) d *= -1;
		if (d < 3) {
			rotEsq(noh);
			fb(noh->esquerda);
		}
		else rotDirEsq(noh);
	}
	else {
		int d = noh->fb - noh->esquerda->fb;
		if (d < 0) d *= -1;
		if (d < 3) {
			rotDir(noh);
			fb(noh->direita);
		}
		else rotEsqDir(noh);
	}
}

void fetchRoot(no* noh)
{
	if (raiz == NULL) {
		cout << "AVL vazia." << endl;
	}
	else {
		cout << raiz->val << endl;
	}
}

void BSTinsereBinBusca(nodeBST* noh, int val)
{
	if (BSTraiz == NULL)
	{
		BSTraiz = new struct nodeBST;
		BSTraiz->val = val;
	}
	else
	{
		if (noh->val >= val)
		{
			if (noh->esquerda == NULL)
			{
				noh->esquerda = new struct nodeBST;
				noh->esquerda->val = val;
				noh->esquerda->pai = noh;
			}
			else
				BSTinsereBinBusca(noh->esquerda, val);
		}
		else
		{
			if (noh->direita == NULL)
			{
				noh->direita = new struct nodeBST;
				noh->direita->val = val;
				noh->direita->pai = noh;
			}
			else
			{
				BSTinsereBinBusca(noh->direita, val);
			}
		}
	}
}

void BSTremoveBinBusca(nodeBST *noh, int val)
{
	if (BSTraiz == NULL) cout << "AVL vazia" << endl;
	else {
		if (BSTbusca(noh, val) == false)
			cout << "Valor nao existe." << endl;
		else {
			if (noh->val == val)
			{
				if (noh->esquerda == NULL && noh->direita == NULL)
				{
					if (noh == BSTraiz) {
						delete(noh);
						BSTraiz = nullptr;
					}
					else {
						nodeBST* pai = noh->pai;
						if (pai->esquerda == noh) pai->esquerda = NULL;
						else pai->direita = NULL;
						delete(noh);
					}
				}
				else {
					if (noh->esquerda != NULL)
						BSTaux = BSTmaiorValor(noh->esquerda);
					else
						BSTaux = BSTmenorValor(noh->direita);
					noh->val = BSTaux->val;
					BSTremoveBinBusca(BSTaux, BSTaux->val);
				}
			}
			else {
				if (noh->val > val)
					BSTremoveBinBusca(noh->esquerda, val);
				else
					BSTremoveBinBusca(noh->direita, val);
			}
		}
	}
}

bool BSTbusca(nodeBST* noh, int val)
{
	if (noh == NULL) return false;
	else if (noh->val == val) return true;
	if (noh->val > val)	BSTbusca(noh->esquerda, val);
	else BSTbusca(noh->direita, val);
}

nodeBST* BSTmenorValor(nodeBST* menor)
{
	if (BSTraiz == NULL) cout << "AVL vazia" << endl;
	else
	{
		while (menor->esquerda != NULL)
			menor = menor->esquerda;
		return menor;
	}
}

nodeBST* BSTmaiorValor(nodeBST* maior)
{
	if (BSTraiz == NULL) cout << "AVL vazia" << endl;
	else
	{
		while (maior->direita != NULL)
			maior = maior->direita;
		return maior;
	}
}

void inOrder(nodeBST* noh)
{
	if (BSTraiz == NULL) cout << "AVL vazia" << endl;
	else {
		if (noh->esquerda != NULL) inOrder(noh->esquerda);
		if (noh != NULL) cout << noh->val << " ";
		else cout << endl;
		if (noh->direita != NULL) inOrder(noh->direita);
	}
}

void preOrder(nodeBST* noh)
{
	if (BSTraiz != NULL)
	{
		if (noh != NULL) cout << noh->val << " ";
		else cout << endl;
		if (noh->esquerda != NULL) preOrder(noh->esquerda);
		if (noh->direita != NULL) preOrder(noh->direita);
	}
	else cout << "AVL vazia" << endl;
}

void postOrder(nodeBST* noh)
{
	if (BSTraiz != NULL)
	{
		if (noh->esquerda != NULL) postOrder(noh->esquerda);
		if (noh->direita != NULL) postOrder(noh->direita);
		if (noh != NULL) cout << noh->val << " ";
		else cout << endl;
	}
	else cout << "AVL vazia" << endl;
}

void avlSaveInOrder(no* noh) {
	if (raiz != NULL)
	{
		if (noh->esquerda != NULL) avlSaveInOrder(noh->esquerda);
		if (noh != NULL) myfile << noh->val << ",";
		if (noh->direita != NULL) avlSaveInOrder(noh->direita);
	}
	else cout << "AVL vazia" << endl;
}

void bstSaveInOrder(nodeBST* noh) {
	if (BSTraiz != NULL)
	{
		if (noh->esquerda != NULL) bstSaveInOrder(noh->esquerda);
		if (noh != NULL) myfile << noh->val << ",";
		if (noh->direita != NULL) bstSaveInOrder(noh->direita);
	}
	else cout << "AVL vazia" << endl;
}

void rnSaveInOrder(t_no * raiz) {
	if (raiz == nil) {
		return;
	}

	rnSaveInOrder(raiz->esquerda);
	myfile << raiz->key << ",";
	rnSaveInOrder(raiz->direita);	
}

bool running = true;

int main()
{
	int option; int key; no* maior; no* menor; nodeBST* BSTmaior; nodeBST* BSTmenor;
	nil = (t_no*)malloc(sizeof(t_no));
	t_no * a = nil;

	ifstream file("arvore.csv"); // declare file stream: http://www.cplusplus.com/reference/iostream/ifstream/
	string value;

	int node;
	if (file.good())
	{
		getline(file, value, ','); // read a string until next comma: http://www.cplusplus.com/reference/string/getline/
		if (value == "avl") {
			getline(file, value, ',');
			total = stoi(value); // converte string para int

			while (file.good()) {
				getline(file, value, ',');
				node = stoi(value);
				insereBinBusca(raiz, node);
			}
			option = 1;
			cout << "Tree: AVL" << endl;
			cout << "Size: " << total << endl;
		}
		else if (value == "bst") {
			getline(file, value, ',');
			total = stoi(value); // converte string para int

			while (file.good()) {
				getline(file, value, ',');
				node = stoi(value);
				BSTinsereBinBusca(BSTraiz, node);
			}
			option = 2;
			cout << "Tree: BST" << endl;
			cout << "Size: " << total << endl;
		}
		else if (value == "rubronegra") {
			getline(file, value, ',');
			total = stoi(value); // converte string para int			

			while (file.good()) {
				getline(file, value, ',');
				node = stoi(value);
				a = insert(a, node);				
			}
			option = 3;
			cout << "Tree: Red-Black" << endl;
			cout << "Size: " << total << endl;
		}
		//cout << string(value, 1, value.length() - 2); // display value removing the first and the last character from it				
	}
	else {
		cout << "Erro na leitura do arquivo" << endl;
	}

	while (running)
	{
		switch (option)
		{
		case 1:
			cout << "MENU" << '\n'
				<< "1: Inserir " << "\n"
				<< "2: Excluir " << "\n"
				<< "3: Em Ordem " << "\n"
				<< "4: Pre Order " << "\n"
				<< "5: Post Order " << "\n"
				<< "6: Menor Valor " << "\n"
				<< "7: Maior valor" << "\n"
				<< "8: Exibir root" << "\n"
				<< "9: Salvar arquivo CSV" << "\n"
				<< "10: Exit" << endl;

			while (running)
			{
				do {
					cout << "Entrada: ";
					cin >> option;
					while (cin.fail())
					{
						cout << "Entrada: ";
						cin.clear();
						cin.ignore(256, '\n');
						cin >> option;
					}
				} while (option < 1 || option > 10);

				switch (option)
				{
				case 1:
					cout << "Insira uma chave: ";
					cin >> key;
					insereBinBusca(raiz, key);
					total++;
					break;
				case 2:
					cout << "Insira uma chave: ";
					cin >> key;
					removeBinBusca(raiz, key);
					total--;
					break;
				case 3:
					inOrder(raiz);
					cout << endl;
					break;
				case 4:
					preOrder(raiz);
					cout << endl;
					break;
				case 5:
					postOrder(raiz);
					cout << endl;
					break;
				case 6:
					menor = menorValor(raiz);
					cout << "Menor valor: " << menor->val << endl;
					break;
				case 7:
					maior = maiorValor(raiz);
					cout << "Maior valor: " << maior->val << endl;
					break;
				case 8:
					fetchRoot(raiz);
					break;
				case 9:
					myfile.open("Saida.csv");
					myfile << "avl\n";
					myfile << total << "\n";
					avlSaveInOrder(raiz);
					myfile.close();
					break;
				case 10:
					running = false;
					break;
				}
			}
			break;
		case 2:
			cout << "MENU" << '\n'
				<< "1: Inserir " << "\n"
				<< "2: Excluir " << "\n"
				<< "3: Em Ordem " << "\n"
				<< "4: Pre Order " << "\n"
				<< "5: Post Order " << "\n"
				<< "6: Salvar " << "\n"
				<< "7: Exit" << endl;

			while (running)
			{
				do {
					cout << "Entrada: ";
					cin >> option;
					while (cin.fail())
					{
						cout << "Entrada: ";
						cin.clear();
						cin.ignore(256, '\n');
						cin >> option;
					}
				} while (option < 1 || option > 7);

				switch (option)
				{
				case 1:
					cout << "Insira uma chave: ";
					cin >> key;
					BSTinsereBinBusca(BSTraiz, key);
					total++;
					break;
				case 2:
					cout << "Insira uma chave: ";
					cin >> key;
					BSTremoveBinBusca(BSTraiz, key);
					total--;
					break;
				case 3:
					inOrder(BSTraiz);
					cout << endl;
					break;
				case 4:
					preOrder(BSTraiz);
					cout << endl;
					break;
				case 5:
					postOrder(BSTraiz);
					cout << endl;
					break;
				case 6:
					myfile.open("Saida.csv");
					myfile << "bst\n";
					myfile << total << "\n";
					bstSaveInOrder(BSTraiz);
					myfile.close();
					break;
				case 7:
					running = false;
					break;
				}
			}
			break;
		case 3:
			cout << "\n\t RED BLACK TREE ";
			cout << "\n 1. Insert in the tree ";
			cout << "\n 2. Delete a node from the tree";
			cout << "\n 3. Search for an element in the tree";
			cout << "\n 4. Display the tree ";
			cout << "\n 5. Save ";
			cout << "\n 6. Exit " << endl;

			while (running) {
				do {
					cout << "Entrada: ";
					cin >> option;
					while (cin.fail())
					{
						cout << "Entrada: ";
						cin.clear();
						cin.ignore(256, '\n');
						cin >> option;
					}
				} while (option < 1 || option > 6);
				switch (option)
				{
				case 1:
					cout << "Insira uma chave: ";
					cin >> key;
					a = insert(a, key);					
					total++;
					break;
				case 2:
					cout << "Insira uma chave: ";
					cin >> key;
					a = remover(a, key);
					total--;
					break;
				case 3:
					cout << "Insira uma chave: ";
					cin >> key;
					a = search(a, key);
					break;
				case 4:
					in_order(a);
					cout << endl;
					break;
				case 5:
					myfile.open("Saida.csv");
					myfile << "rubronegra\n";
					myfile << total << "\n";
					rnSaveInOrder(a);
					myfile.close();
					break;
				case 6:
					running = false;
					break;
				default:
					cout << "\nEnter a Valid Choice.";
				}
			}
			break;
		}
	}

	system("pause");
	return 0;

}
