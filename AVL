#include <iostream>
#include <stdlib.h>

using namespace std;

struct no
{
	struct no* pai = NULL;
	struct no* esquerda = NULL;
	struct no* direita = NULL;
	int val;
};

struct no* raiz = NULL;
struct no* aux = NULL;

void insereBinBusca(struct no* noh, int val)
{
	if (raiz == NULL)
	{
		raiz = new struct no;
		raiz->val = val;
	}
	else
	{
		if ((*noh).val >= val)
		{
			if ((*noh).esquerda == NULL)
			{
				(*noh).esquerda = new struct no;
				(*(*noh).esquerda).val = val;
			}
			else
				insereBinBusca((*noh).esquerda, val);
		}
		else
		{
			if ((*noh).direita == NULL)
			{
				(*noh).direita = new struct no;
				(*(*noh).direita).val = val;
			}
			else
			{
				insereBinBusca(noh->direita, val);
			}
		}
	}
}

int menorValor(struct no* menor)
{
	if (raiz == NULL)
		cout << "AVL vazia" << endl;
	else
	{
		while (menor->esquerda != NULL)
			menor = menor->esquerda;
		return menor->val;
	}
}

int maiorValor(struct no* maior)
{
	if (raiz == NULL)
		cout << "AVL vazia" << endl;
	else
	{
		while (maior->direita != NULL)
			maior = maior->direita;
		return maior->val;
	}
}

void removeBinBusca(no *noh, int val)
{	
	if (raiz == NULL)
	{
		cout << "AVL vazia" << endl;
		exit(0);
	}		
	
	if (noh->val == val)
	{
		if (noh->esquerda == NULL && noh->direita == NULL)
		{
			delete(noh);
		}
		else {
			if (noh->esquerda != NULL)
				aux->val = maiorValor(noh->esquerda);
			else
				aux->val = menorValor(noh->direita);
			noh->val = aux->val;
			removeBinBusca(noh, noh->val);
		}
	}
	else {
		if (noh->val > val)
			removeBinBusca(noh->esquerda, val);
		else
			removeBinBusca(noh->direita, val);
	}	
}

void inOrder(struct no* noh)
{
	if(noh->esquerda != NULL)
		inOrder((*noh).esquerda);
	cout << (*noh).val << endl;
	if(noh->direita != NULL)
		inOrder((*noh).direita);
}

void preOrder(struct no* noh)
{
	cout << (*noh).val << endl;
	if (noh->esquerda != NULL)
		inOrder((*noh).esquerda);
	if (noh->direita != NULL)
		inOrder((*noh).direita);
}

void postOrder(struct no* noh)
{
	if (noh->esquerda != NULL)
		inOrder((*noh).esquerda);
	if (noh->direita != NULL)
		inOrder((*noh).direita);
	cout << (*noh).val << endl;
}

bool running = true;

int main()
{
	int option;
	int key;

	while (running)
	{
		do {
			cout << "MENU" << endl;
			cout << "1: Inserir " << " - "; cout << "2: Excluir " << " - "; cout << "3: Em Ordem " << " - "; cout << "4: Pre Order " << " - "; 
			cout << "5: Post Order " << " - " << "6: Menor Valor " << endl;
			cout << "Escolha: ";
			cin >> option;
		} while (option != 1 && option != 2 && option != 3 && option != 4 && option != 5 && option != 6);
		switch (option)
		{
			case 1:
				cout << "Insira uma chave: ";
				cin >> key;
				insereBinBusca(raiz, key);
				break;
			case 2:
				cout << "Insira uma chave: ";
				cin >> key;
				removeBinBusca(raiz, key);
				break;
			case 3:
				inOrder(raiz);
				break;
			case 4:
				preOrder(raiz);
				break;
			case 5:
				postOrder(raiz);
				break;
			case 6:
				cout << "Menor valor: " << menorValor(raiz) << endl;
				break;
			}
		}
	system("pause");
	return 0;
}
